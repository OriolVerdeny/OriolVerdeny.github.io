dplyr::mutate(Predicted = predict(model, newdata = x))
nID = nrow(data_nls)
g = ggplot2::ggplot(data = data_nls, ggplot2::aes(x = x, y = y))
g = g + ggplot2::geom_point(size = 0.001, alpha = 1/2, na.rm = TRUE)
g = g + ggplot2::stat_density_2d(aes(fill = ..level..), alpha = 0.25, geom = "polygon", n=100)
g = g + ggplot2::scale_colour_gradient(low = "green", high = "red")
g = g + scale_fill_gradient(low = "blue", high = "red")
# Fitting model
g = g + ggplot2::geom_smooth(method="nls",
se = FALSE,
formula = y ~ SSmicmen(x, phi1, phi2),
na.rm = TRUE,
color = "black")
# Axes:
# eliminate background, gridlines and chart border
g = g + ggplot2::theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
# g = g + scale_x_continuous(breaks=seq(0, 15, 3))
# g = g + scale_y_continuous(breaks=seq(0, 20, 5))
g = g + xlim(0, 20)
g = g + ylim(0, 10)
g = g + ggplot2::theme(axis.line = element_line(colour = "black")) # plot the axis
g = g + ggplot2::labs(x="X", y="Y") # Rename x and y axes
# Legend:
g = g + ggplot2::theme(legend.title = element_text(colour = "black", size=12, face="plain"))
g = g + ggplot2::guides(colour=guide_legend(override.aes = list(size=4))) # change legend point size
g = g + ggplot2::theme(legend.key=element_rect(fill = 'white')) # clear legend background
g = g + theme(legend.position="none")
# g + theme(panel.background = element_rect(fill = 'green', colour = 'red'))
g = g + theme(plot.background = element_rect(fill = 'gray', colour = ''))
g
# ggsave("Projects - 06 Data science2.png", width = 4, height = 2.7, dpi = 200)
# Plot for html project
# http://www.cerebralmastication.com/2010/08/even-simpler-multivariate-correlated-simulations/
# https://www.r-bloggers.com/simulating-random-multivariate-correlated-data-continuous-variables/
# https://www.r-bloggers.com/easily-generate-correlated-variables-from-any-distribution-without-copulas/
# https://www.r-bloggers.com/first-steps-with-non-linear-regression-in-r/
# http://www.wikihow.com/Password-Protect-a-Web-Page
library(dplyr)
library(ggplot2)
#simulate some data
set.seed(20160227)
n = 5000
mean_x = 6
sd_x = 3
sd_error = 0.5
data_nls <- dplyr::data_frame(x = rnorm(n = n, mean = mean_x, sd = sd_x)) %>%
dplyr::filter(x > 0) %>%
dplyr::mutate(phi1 = runif(1,10,20),
phi2 = runif(1,0,10),
error = rnorm(n(), mean = 0, sd = sd_error),
y = ((phi1*x)/(phi2+x))+error)
model <- nls(y~SSmicmen(x, phi1, phi2), data = data_nls)
data_nls <- data_nls %>%
dplyr::mutate(Predicted = predict(model, newdata = x))
nID = nrow(data_nls)
g = ggplot2::ggplot(data = data_nls, ggplot2::aes(x = x, y = y))
g = g + ggplot2::geom_point(size = 0.001, alpha = 1/2, na.rm = TRUE)
g = g + ggplot2::stat_density_2d(aes(fill = ..level..), alpha = 0.25, geom = "polygon", n=100)
g = g + ggplot2::scale_colour_gradient(low = "green", high = "red")
g = g + scale_fill_gradient(low = "blue", high = "red")
# Fitting model
g = g + ggplot2::geom_smooth(method="nls",
se = FALSE,
formula = y ~ SSmicmen(x, phi1, phi2),
na.rm = TRUE,
color = "black")
# Axes:
# eliminate background, gridlines and chart border
g = g + ggplot2::theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
# g = g + scale_x_continuous(breaks=seq(0, 15, 3))
# g = g + scale_y_continuous(breaks=seq(0, 20, 5))
g = g + xlim(0, 20)
g = g + ylim(0, 10)
g = g + ggplot2::theme(axis.line = element_line(colour = "black")) # plot the axis
g = g + ggplot2::labs(x="X", y="Y") # Rename x and y axes
# Legend:
g = g + ggplot2::theme(legend.title = element_text(colour = "black", size=12, face="plain"))
g = g + ggplot2::guides(colour=guide_legend(override.aes = list(size=4))) # change legend point size
g = g + ggplot2::theme(legend.key=element_rect(fill = 'white')) # clear legend background
g = g + theme(legend.position="none")
# g + theme(panel.background = element_rect(fill = 'green', colour = 'red'))
g = g + theme(plot.background = element_rect(fill = 'gray'))
g
# ggsave("Projects - 06 Data science2.png", width = 4, height = 2.7, dpi = 200)
# Plot for html project
# http://www.cerebralmastication.com/2010/08/even-simpler-multivariate-correlated-simulations/
# https://www.r-bloggers.com/simulating-random-multivariate-correlated-data-continuous-variables/
# https://www.r-bloggers.com/easily-generate-correlated-variables-from-any-distribution-without-copulas/
# https://www.r-bloggers.com/first-steps-with-non-linear-regression-in-r/
# http://www.wikihow.com/Password-Protect-a-Web-Page
library(dplyr)
library(ggplot2)
#simulate some data
set.seed(20160227)
n = 5000
mean_x = 6
sd_x = 3
sd_error = 0.5
data_nls <- dplyr::data_frame(x = rnorm(n = n, mean = mean_x, sd = sd_x)) %>%
dplyr::filter(x > 0) %>%
dplyr::mutate(phi1 = runif(1,10,20),
phi2 = runif(1,0,10),
error = rnorm(n(), mean = 0, sd = sd_error),
y = ((phi1*x)/(phi2+x))+error)
model <- nls(y~SSmicmen(x, phi1, phi2), data = data_nls)
data_nls <- data_nls %>%
dplyr::mutate(Predicted = predict(model, newdata = x))
nID = nrow(data_nls)
g = ggplot2::ggplot(data = data_nls, ggplot2::aes(x = x, y = y))
g = g + ggplot2::geom_point(size = 0.001, alpha = 1/2, na.rm = TRUE)
g = g + ggplot2::stat_density_2d(aes(fill = ..level..), alpha = 0.25, geom = "polygon", n=100)
g = g + ggplot2::scale_colour_gradient(low = "green", high = "red")
g = g + scale_fill_gradient(low = "blue", high = "red")
# Fitting model
g = g + ggplot2::geom_smooth(method="nls",
se = FALSE,
formula = y ~ SSmicmen(x, phi1, phi2),
na.rm = TRUE,
color = "black")
# Axes:
# eliminate background, gridlines and chart border
g = g + ggplot2::theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
# g = g + scale_x_continuous(breaks=seq(0, 15, 3))
# g = g + scale_y_continuous(breaks=seq(0, 20, 5))
g = g + xlim(0, 20)
g = g + ylim(0, 10)
g = g + ggplot2::theme(axis.line = element_line(colour = "black")) # plot the axis
g = g + ggplot2::labs(x="X", y="Y") # Rename x and y axes
# Legend:
g = g + ggplot2::theme(legend.title = element_text(colour = "black", size=12, face="plain"))
g = g + ggplot2::guides(colour=guide_legend(override.aes = list(size=4))) # change legend point size
g = g + ggplot2::theme(legend.key=element_rect(fill = 'white')) # clear legend background
g = g + theme(legend.position="none")
# g + theme(panel.background = element_rect(fill = 'green', colour = 'red'))
g = g + theme(plot.background = element_rect(fill = 'gray', colour = 'gray'))
g
# ggsave("Projects - 06 Data science2.png", width = 4, height = 2.7, dpi = 200)
# Plot for html project
# http://www.cerebralmastication.com/2010/08/even-simpler-multivariate-correlated-simulations/
# https://www.r-bloggers.com/simulating-random-multivariate-correlated-data-continuous-variables/
# https://www.r-bloggers.com/easily-generate-correlated-variables-from-any-distribution-without-copulas/
# https://www.r-bloggers.com/first-steps-with-non-linear-regression-in-r/
# http://www.wikihow.com/Password-Protect-a-Web-Page
library(dplyr)
library(ggplot2)
#simulate some data
set.seed(20160227)
n = 5000
mean_x = 6
sd_x = 3
sd_error = 0.5
data_nls <- dplyr::data_frame(x = rnorm(n = n, mean = mean_x, sd = sd_x)) %>%
dplyr::filter(x > 0) %>%
dplyr::mutate(phi1 = runif(1,10,20),
phi2 = runif(1,0,10),
error = rnorm(n(), mean = 0, sd = sd_error),
y = ((phi1*x)/(phi2+x))+error)
model <- nls(y~SSmicmen(x, phi1, phi2), data = data_nls)
data_nls <- data_nls %>%
dplyr::mutate(Predicted = predict(model, newdata = x))
nID = nrow(data_nls)
g = ggplot2::ggplot(data = data_nls, ggplot2::aes(x = x, y = y))
g = g + ggplot2::geom_point(size = 0.001, alpha = 1/2, na.rm = TRUE)
g = g + ggplot2::stat_density_2d(aes(fill = ..level..), alpha = 0.25, geom = "polygon", n=100)
g = g + ggplot2::scale_colour_gradient(low = "green", high = "red")
g = g + scale_fill_gradient(low = "blue", high = "red")
# Fitting model
g = g + ggplot2::geom_smooth(method="nls",
se = FALSE,
formula = y ~ SSmicmen(x, phi1, phi2),
na.rm = TRUE,
color = "black")
# Axes:
# eliminate background, gridlines and chart border
g = g + ggplot2::theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
# g = g + scale_x_continuous(breaks=seq(0, 15, 3))
# g = g + scale_y_continuous(breaks=seq(0, 20, 5))
g = g + xlim(0, 20)
g = g + ylim(0, 10)
g = g + ggplot2::theme(axis.line = element_line(colour = "black")) # plot the axis
g = g + ggplot2::labs(x="X", y="Y") # Rename x and y axes
# Legend:
g = g + ggplot2::theme(legend.title = element_text(colour = "black", size=12, face="plain"))
g = g + ggplot2::guides(colour=guide_legend(override.aes = list(size=4))) # change legend point size
g = g + ggplot2::theme(legend.key=element_rect(fill = 'white')) # clear legend background
g = g + theme(legend.position="none")
# g + theme(panel.background = element_rect(fill = 'green', colour = 'red'))
g = g + theme(plot.background = element_rect(fill = 'gray80', colour = 'gray'))
g
# ggsave("Projects - 06 Data science2.png", width = 4, height = 2.7, dpi = 200)
# Plot for html project
# http://www.cerebralmastication.com/2010/08/even-simpler-multivariate-correlated-simulations/
# https://www.r-bloggers.com/simulating-random-multivariate-correlated-data-continuous-variables/
# https://www.r-bloggers.com/easily-generate-correlated-variables-from-any-distribution-without-copulas/
# https://www.r-bloggers.com/first-steps-with-non-linear-regression-in-r/
# http://www.wikihow.com/Password-Protect-a-Web-Page
library(dplyr)
library(ggplot2)
#simulate some data
set.seed(20160227)
n = 5000
mean_x = 6
sd_x = 3
sd_error = 0.5
data_nls <- dplyr::data_frame(x = rnorm(n = n, mean = mean_x, sd = sd_x)) %>%
dplyr::filter(x > 0) %>%
dplyr::mutate(phi1 = runif(1,10,20),
phi2 = runif(1,0,10),
error = rnorm(n(), mean = 0, sd = sd_error),
y = ((phi1*x)/(phi2+x))+error)
model <- nls(y~SSmicmen(x, phi1, phi2), data = data_nls)
data_nls <- data_nls %>%
dplyr::mutate(Predicted = predict(model, newdata = x))
nID = nrow(data_nls)
g = ggplot2::ggplot(data = data_nls, ggplot2::aes(x = x, y = y))
g = g + ggplot2::geom_point(size = 0.001, alpha = 1/2, na.rm = TRUE)
g = g + ggplot2::stat_density_2d(aes(fill = ..level..), alpha = 0.25, geom = "polygon", n=100)
g = g + ggplot2::scale_colour_gradient(low = "green", high = "red")
g = g + scale_fill_gradient(low = "blue", high = "red")
# Fitting model
g = g + ggplot2::geom_smooth(method="nls",
se = FALSE,
formula = y ~ SSmicmen(x, phi1, phi2),
na.rm = TRUE,
color = "black")
# Axes:
# eliminate background, gridlines and chart border
g = g + ggplot2::theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
# g = g + scale_x_continuous(breaks=seq(0, 15, 3))
# g = g + scale_y_continuous(breaks=seq(0, 20, 5))
g = g + xlim(0, 20)
g = g + ylim(0, 10)
g = g + ggplot2::theme(axis.line = element_line(colour = "black")) # plot the axis
g = g + ggplot2::labs(x="X", y="Y") # Rename x and y axes
# Legend:
g = g + ggplot2::theme(legend.title = element_text(colour = "black", size=12, face="plain"))
g = g + ggplot2::guides(colour=guide_legend(override.aes = list(size=4))) # change legend point size
g = g + ggplot2::theme(legend.key=element_rect(fill = 'white')) # clear legend background
g = g + theme(legend.position="none")
# g + theme(panel.background = element_rect(fill = 'green', colour = 'red'))
g = g + theme(plot.background = element_rect(fill = 'gray20', colour = 'gray'))
g
# ggsave("Projects - 06 Data science2.png", width = 4, height = 2.7, dpi = 200)
# Plot for html project
# http://www.cerebralmastication.com/2010/08/even-simpler-multivariate-correlated-simulations/
# https://www.r-bloggers.com/simulating-random-multivariate-correlated-data-continuous-variables/
# https://www.r-bloggers.com/easily-generate-correlated-variables-from-any-distribution-without-copulas/
# https://www.r-bloggers.com/first-steps-with-non-linear-regression-in-r/
# http://www.wikihow.com/Password-Protect-a-Web-Page
library(dplyr)
library(ggplot2)
#simulate some data
set.seed(20160227)
n = 5000
mean_x = 6
sd_x = 3
sd_error = 0.5
data_nls <- dplyr::data_frame(x = rnorm(n = n, mean = mean_x, sd = sd_x)) %>%
dplyr::filter(x > 0) %>%
dplyr::mutate(phi1 = runif(1,10,20),
phi2 = runif(1,0,10),
error = rnorm(n(), mean = 0, sd = sd_error),
y = ((phi1*x)/(phi2+x))+error)
model <- nls(y~SSmicmen(x, phi1, phi2), data = data_nls)
data_nls <- data_nls %>%
dplyr::mutate(Predicted = predict(model, newdata = x))
nID = nrow(data_nls)
g = ggplot2::ggplot(data = data_nls, ggplot2::aes(x = x, y = y))
g = g + ggplot2::geom_point(size = 0.001, alpha = 1/2, na.rm = TRUE)
g = g + ggplot2::stat_density_2d(aes(fill = ..level..), alpha = 0.25, geom = "polygon", n=100)
g = g + ggplot2::scale_colour_gradient(low = "green", high = "red")
g = g + scale_fill_gradient(low = "blue", high = "red")
# Fitting model
g = g + ggplot2::geom_smooth(method="nls",
se = FALSE,
formula = y ~ SSmicmen(x, phi1, phi2),
na.rm = TRUE,
color = "black")
# Axes:
# eliminate background, gridlines and chart border
g = g + ggplot2::theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
# g = g + scale_x_continuous(breaks=seq(0, 15, 3))
# g = g + scale_y_continuous(breaks=seq(0, 20, 5))
g = g + xlim(0, 20)
g = g + ylim(0, 10)
g = g + ggplot2::theme(axis.line = element_line(colour = "black")) # plot the axis
g = g + ggplot2::labs(x="X", y="Y") # Rename x and y axes
# Legend:
g = g + ggplot2::theme(legend.title = element_text(colour = "black", size=12, face="plain"))
g = g + ggplot2::guides(colour=guide_legend(override.aes = list(size=4))) # change legend point size
g = g + ggplot2::theme(legend.key=element_rect(fill = 'white')) # clear legend background
g = g + theme(legend.position="none")
# g + theme(panel.background = element_rect(fill = 'green', colour = 'red'))
g = g + theme(plot.background = element_rect(fill = 'gray95', colour = 'gray'))
g
# ggsave("Projects - 06 Data science2.png", width = 4, height = 2.7, dpi = 200)
# Plot for html project
# http://www.cerebralmastication.com/2010/08/even-simpler-multivariate-correlated-simulations/
# https://www.r-bloggers.com/simulating-random-multivariate-correlated-data-continuous-variables/
# https://www.r-bloggers.com/easily-generate-correlated-variables-from-any-distribution-without-copulas/
# https://www.r-bloggers.com/first-steps-with-non-linear-regression-in-r/
# http://www.wikihow.com/Password-Protect-a-Web-Page
library(dplyr)
library(ggplot2)
#simulate some data
set.seed(20160227)
n = 5000
mean_x = 6
sd_x = 3
sd_error = 0.5
data_nls <- dplyr::data_frame(x = rnorm(n = n, mean = mean_x, sd = sd_x)) %>%
dplyr::filter(x > 0) %>%
dplyr::mutate(phi1 = runif(1,10,20),
phi2 = runif(1,0,10),
error = rnorm(n(), mean = 0, sd = sd_error),
y = ((phi1*x)/(phi2+x))+error)
model <- nls(y~SSmicmen(x, phi1, phi2), data = data_nls)
data_nls <- data_nls %>%
dplyr::mutate(Predicted = predict(model, newdata = x))
nID = nrow(data_nls)
g = ggplot2::ggplot(data = data_nls, ggplot2::aes(x = x, y = y))
g = g + ggplot2::geom_point(size = 0.001, alpha = 1/2, na.rm = TRUE)
g = g + ggplot2::stat_density_2d(aes(fill = ..level..), alpha = 0.25, geom = "polygon", n=100)
g = g + ggplot2::scale_colour_gradient(low = "green", high = "red")
g = g + scale_fill_gradient(low = "blue", high = "red")
# Fitting model
g = g + ggplot2::geom_smooth(method="nls",
se = FALSE,
formula = y ~ SSmicmen(x, phi1, phi2),
na.rm = TRUE,
color = "black")
# Axes:
# eliminate background, gridlines and chart border
g = g + ggplot2::theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
# g = g + scale_x_continuous(breaks=seq(0, 15, 3))
# g = g + scale_y_continuous(breaks=seq(0, 20, 5))
g = g + xlim(0, 20)
g = g + ylim(0, 10)
g = g + ggplot2::theme(axis.line = element_line(colour = "black")) # plot the axis
g = g + ggplot2::labs(x="X", y="Y") # Rename x and y axes
# Legend:
g = g + ggplot2::theme(legend.title = element_text(colour = "black", size=12, face="plain"))
g = g + ggplot2::guides(colour=guide_legend(override.aes = list(size=4))) # change legend point size
g = g + ggplot2::theme(legend.key=element_rect(fill = 'white')) # clear legend background
g = g + theme(legend.position="none")
# g + theme(panel.background = element_rect(fill = 'green', colour = 'red'))
g = g + theme(plot.background = element_rect(fill = 'gray90', colour = 'gray'))
g
# ggsave("Projects - 06 Data science2.png", width = 4, height = 2.7, dpi = 200)
# Plot for html project
# http://www.cerebralmastication.com/2010/08/even-simpler-multivariate-correlated-simulations/
# https://www.r-bloggers.com/simulating-random-multivariate-correlated-data-continuous-variables/
# https://www.r-bloggers.com/easily-generate-correlated-variables-from-any-distribution-without-copulas/
# https://www.r-bloggers.com/first-steps-with-non-linear-regression-in-r/
# http://www.wikihow.com/Password-Protect-a-Web-Page
library(dplyr)
library(ggplot2)
#simulate some data
set.seed(20160227)
n = 5000
mean_x = 6
sd_x = 3
sd_error = 0.5
data_nls <- dplyr::data_frame(x = rnorm(n = n, mean = mean_x, sd = sd_x)) %>%
dplyr::filter(x > 0) %>%
dplyr::mutate(phi1 = runif(1,10,20),
phi2 = runif(1,0,10),
error = rnorm(n(), mean = 0, sd = sd_error),
y = ((phi1*x)/(phi2+x))+error)
model <- nls(y~SSmicmen(x, phi1, phi2), data = data_nls)
data_nls <- data_nls %>%
dplyr::mutate(Predicted = predict(model, newdata = x))
nID = nrow(data_nls)
g = ggplot2::ggplot(data = data_nls, ggplot2::aes(x = x, y = y))
g = g + ggplot2::geom_point(size = 0.001, alpha = 1/2, na.rm = TRUE)
g = g + ggplot2::stat_density_2d(aes(fill = ..level..), alpha = 0.25, geom = "polygon", n=100)
g = g + ggplot2::scale_colour_gradient(low = "green", high = "red")
g = g + scale_fill_gradient(low = "blue", high = "red")
# Fitting model
g = g + ggplot2::geom_smooth(method="nls",
se = FALSE,
formula = y ~ SSmicmen(x, phi1, phi2),
na.rm = TRUE,
color = "black")
# Axes:
# eliminate background, gridlines and chart border
g = g + ggplot2::theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
# g = g + scale_x_continuous(breaks=seq(0, 15, 3))
# g = g + scale_y_continuous(breaks=seq(0, 20, 5))
g = g + xlim(0, 20)
g = g + ylim(0, 10)
g = g + ggplot2::theme(axis.line = element_line(colour = "black")) # plot the axis
g = g + ggplot2::labs(x="X", y="Y") # Rename x and y axes
# Legend:
g = g + ggplot2::theme(legend.title = element_text(colour = "black", size=12, face="plain"))
g = g + ggplot2::guides(colour=guide_legend(override.aes = list(size=4))) # change legend point size
g = g + ggplot2::theme(legend.key=element_rect(fill = 'white')) # clear legend background
g = g + theme(legend.position="none")
# g + theme(panel.background = element_rect(fill = 'green', colour = 'red'))
g = g + theme(plot.background = element_rect(fill = 'gray90', colour = 'gray90'))
g
# ggsave("Projects - 06 Data science2.png", width = 4, height = 2.7, dpi = 200)
ggsave("Projects - 06 Data science2.png", width = 4, height = 2.7, dpi = 200)
ggsave("Projects - 06 Data science.png", width = 4, height = 2.7, dpi = 200)
# Plot for html project
# http://www.cerebralmastication.com/2010/08/even-simpler-multivariate-correlated-simulations/
# https://www.r-bloggers.com/simulating-random-multivariate-correlated-data-continuous-variables/
# https://www.r-bloggers.com/easily-generate-correlated-variables-from-any-distribution-without-copulas/
# https://www.r-bloggers.com/first-steps-with-non-linear-regression-in-r/
# http://www.wikihow.com/Password-Protect-a-Web-Page
library(dplyr)
library(ggplot2)
#simulate some data
set.seed(20160227)
n = 5000
mean_x = 6
sd_x = 3
sd_error = 0.5
data_nls <- dplyr::data_frame(x = rnorm(n = n, mean = mean_x, sd = sd_x)) %>%
dplyr::filter(x > 0) %>%
dplyr::mutate(phi1 = runif(1,10,20),
phi2 = runif(1,0,10),
error = rnorm(n(), mean = 0, sd = sd_error),
y = ((phi1*x)/(phi2+x))+error)
model <- nls(y~SSmicmen(x, phi1, phi2), data = data_nls)
data_nls <- data_nls %>%
dplyr::mutate(Predicted = predict(model, newdata = x))
nID = nrow(data_nls)
g = ggplot2::ggplot(data = data_nls, ggplot2::aes(x = x, y = y))
g = g + ggplot2::geom_point(size = 0.001, alpha = 1/2, na.rm = TRUE)
g = g + ggplot2::stat_density_2d(aes(fill = ..level..), alpha = 0.25, geom = "polygon", n=100)
g = g + ggplot2::scale_colour_gradient(low = "green", high = "red")
g = g + scale_fill_gradient(low = "blue", high = "red")
# Fitting model
g = g + ggplot2::geom_smooth(method="nls",
se = FALSE,
formula = y ~ SSmicmen(x, phi1, phi2),
na.rm = TRUE,
color = "black")
# Axes:
# eliminate background, gridlines and chart border
g = g + ggplot2::theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
# g = g + scale_x_continuous(breaks=seq(0, 15, 3))
# g = g + scale_y_continuous(breaks=seq(0, 20, 5))
g = g + xlim(0, 20)
g = g + ylim(0, 10)
g = g + ggplot2::theme(axis.line = element_line(colour = "black")) # plot the axis
g = g + ggplot2::labs(x="Days", y="Size") # Rename x and y axes
# Legend:
g = g + ggplot2::theme(legend.title = element_text(colour = "black", size=12, face="plain"))
g = g + ggplot2::guides(colour=guide_legend(override.aes = list(size=4))) # change legend point size
g = g + ggplot2::theme(legend.key=element_rect(fill = 'white')) # clear legend background
g = g + theme(legend.position="none")
# g + theme(panel.background = element_rect(fill = 'green', colour = 'red'))
g = g + theme(plot.background = element_rect(fill = 'gray90', colour = 'gray90'))
g
# ggsave("Projects - 06 Data science.png", width = 4, height = 2.7, dpi = 200)
ggsave("Projects - 06 Data science.png", width = 4, height = 2.7, dpi = 200)
